
d0003e_labb2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080011a  0080011a  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f38  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa0  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056c  00000000  00000000  00003411  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000397d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e7       	ldi	r30, 0x7C	; 124
  70:	fc e0       	ldi	r31, 0x0C	; 12
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <main>
  92:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
#define EightValue  0x1f51 //0001010111110001 0x1 0xf 0x5 0x1 = 0x1f51
#define NineValue   0x0b51 //0001010110110000 0x0 0xb 0x5 0x1 = 0x0b51 
#define ValueArray (int[]){ZeroValue,OneValue,TwoValue,ThreeValue,FourValue,FiveValue,SixValue,SevenValue,EightValue,NineValue,BlankValue}

void LCD_Init(void) {
	CLKPR = (1 << CLKPCE); 
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
  a2:	10 82       	st	Z, r1

    // Use external asynchronous clock source 
    // 1/3 Bias and 1/4 duty, 25 segments enabled 
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1)| (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  a4:	87 eb       	ldi	r24, 0xB7	; 183
  a6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// 
    // Using 16 as prescaler selection and 8 as LCD Clock Divide 
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    // Set segment drive time to 300 us and output voltage to 3.35 V
    LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1)| (1<<LCDCC0);
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    // Enable LCD, low power waveform, no frame interrupt, no blanking 
    LCDCRA = (1<<LCDEN) | (1<<LCDAB) |  (0<<LCDBL);
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  bc:	08 95       	ret

000000be <writeChar>:
}

void writeChar(char ch, int pos) {
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	c2 51       	subi	r28, 0x12	; 18
  c8:	d2 40       	sbci	r29, 0x02	; 2
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61

	volatile int i = 0;
  d4:	cf 5e       	subi	r28, 0xEF	; 239
  d6:	dd 4f       	sbci	r29, 0xFD	; 253
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	18 82       	st	Y, r1
  dc:	c1 51       	subi	r28, 0x11	; 17
  de:	d2 40       	sbci	r29, 0x02	; 2
	if (pos < 0 || pos > 5) {
  e0:	66 30       	cpi	r22, 0x06	; 6
  e2:	71 05       	cpc	r23, r1
  e4:	08 f0       	brcs	.+2      	; 0xe8 <writeChar+0x2a>
  e6:	c2 c3       	rjmp	.+1924   	; 0x86c <__stack+0x36d>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
  e8:	90 ed       	ldi	r25, 0xD0	; 208
  ea:	98 0f       	add	r25, r24
  ec:	9a 30       	cpi	r25, 0x0A	; 10
  ee:	48 f0       	brcs	.+18     	; 0x102 <writeChar+0x44>
		i=10;
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	cf 5e       	subi	r28, 0xEF	; 239
  f6:	dd 4f       	sbci	r29, 0xFD	; 253
  f8:	99 83       	std	Y+1, r25	; 0x01
  fa:	88 83       	st	Y, r24
  fc:	c1 51       	subi	r28, 0x11	; 17
  fe:	d2 40       	sbci	r29, 0x02	; 2
 100:	08 c0       	rjmp	.+16     	; 0x112 <writeChar+0x54>
	}else{
        i = ch - 48;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	c0 97       	sbiw	r24, 0x30	; 48
 106:	cf 5e       	subi	r28, 0xEF	; 239
 108:	dd 4f       	sbci	r29, 0xFD	; 253
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
 10e:	c1 51       	subi	r28, 0x11	; 17
 110:	d2 40       	sbci	r29, 0x02	; 2
    }
	if(pos==0){
 112:	61 15       	cp	r22, r1
 114:	71 05       	cpc	r23, r1
 116:	09 f0       	breq	.+2      	; 0x11a <writeChar+0x5c>
 118:	98 c0       	rjmp	.+304    	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&ValueArray[i])<<0;
 11a:	2c ee       	ldi	r18, 0xEC	; 236
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	80 81       	ld	r24, Z
 122:	96 e1       	ldi	r25, 0x16	; 22
 124:	e4 e0       	ldi	r30, 0x04	; 4
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	a5 50       	subi	r26, 0x05	; 5
 12c:	be 4f       	sbci	r27, 0xFE	; 254
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	9a 95       	dec	r25
 134:	e1 f7       	brne	.-8      	; 0x12e <writeChar+0x70>
 136:	cf 5e       	subi	r28, 0xEF	; 239
 138:	dd 4f       	sbci	r29, 0xFD	; 253
 13a:	e8 81       	ld	r30, Y
 13c:	f9 81       	ldd	r31, Y+1	; 0x01
 13e:	c1 51       	subi	r28, 0x11	; 17
 140:	d2 40       	sbci	r29, 0x02	; 2
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	4b ef       	ldi	r20, 0xFB	; 251
 148:	51 e0       	ldi	r21, 0x01	; 1
 14a:	4c 0f       	add	r20, r28
 14c:	5d 1f       	adc	r21, r29
 14e:	e4 0f       	add	r30, r20
 150:	f5 1f       	adc	r31, r21
 152:	90 81       	ld	r25, Z
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	89 2b       	or	r24, r25
 15a:	f9 01       	movw	r30, r18
 15c:	80 83       	st	Z, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 15e:	41 ef       	ldi	r20, 0xF1	; 241
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	fa 01       	movw	r30, r20
 164:	20 81       	ld	r18, Z
 166:	86 e1       	ldi	r24, 0x16	; 22
 168:	e4 e0       	ldi	r30, 0x04	; 4
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	de 01       	movw	r26, r28
 16e:	ab 51       	subi	r26, 0x1B	; 27
 170:	be 4f       	sbci	r27, 0xFE	; 254
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <writeChar+0xb4>
 17a:	cf 5e       	subi	r28, 0xEF	; 239
 17c:	dd 4f       	sbci	r29, 0xFD	; 253
 17e:	e8 81       	ld	r30, Y
 180:	f9 81       	ldd	r31, Y+1	; 0x01
 182:	c1 51       	subi	r28, 0x11	; 17
 184:	d2 40       	sbci	r29, 0x02	; 2
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	85 ee       	ldi	r24, 0xE5	; 229
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	8c 0f       	add	r24, r28
 190:	9d 1f       	adc	r25, r29
 192:	e8 0f       	add	r30, r24
 194:	f9 1f       	adc	r31, r25
 196:	80 81       	ld	r24, Z
 198:	91 81       	ldd	r25, Z+1	; 0x01
 19a:	80 7f       	andi	r24, 0xF0	; 240
 19c:	99 27       	eor	r25, r25
 19e:	95 95       	asr	r25
 1a0:	87 95       	ror	r24
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	20 7f       	andi	r18, 0xF0	; 240
 1b0:	82 2b       	or	r24, r18
 1b2:	fa 01       	movw	r30, r20
 1b4:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 1b6:	46 ef       	ldi	r20, 0xF6	; 246
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	fa 01       	movw	r30, r20
 1bc:	80 81       	ld	r24, Z
 1be:	96 e1       	ldi	r25, 0x16	; 22
 1c0:	e4 e0       	ldi	r30, 0x04	; 4
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	de 01       	movw	r26, r28
 1c6:	a1 53       	subi	r26, 0x31	; 49
 1c8:	be 4f       	sbci	r27, 0xFE	; 254
 1ca:	01 90       	ld	r0, Z+
 1cc:	0d 92       	st	X+, r0
 1ce:	9a 95       	dec	r25
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <writeChar+0x10c>
 1d2:	cf 5e       	subi	r28, 0xEF	; 239
 1d4:	dd 4f       	sbci	r29, 0xFD	; 253
 1d6:	e8 81       	ld	r30, Y
 1d8:	f9 81       	ldd	r31, Y+1	; 0x01
 1da:	c1 51       	subi	r28, 0x11	; 17
 1dc:	d2 40       	sbci	r29, 0x02	; 2
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	2f ec       	ldi	r18, 0xCF	; 207
 1e4:	31 e0       	ldi	r19, 0x01	; 1
 1e6:	2c 0f       	add	r18, r28
 1e8:	3d 1f       	adc	r19, r29
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	20 81       	ld	r18, Z
 1f0:	31 81       	ldd	r19, Z+1	; 0x01
 1f2:	22 27       	eor	r18, r18
 1f4:	3f 70       	andi	r19, 0x0F	; 15
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	83 2b       	or	r24, r19
 1fa:	fa 01       	movw	r30, r20
 1fc:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 1fe:	2b ef       	ldi	r18, 0xFB	; 251
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	80 81       	ld	r24, Z
 206:	96 e1       	ldi	r25, 0x16	; 22
 208:	e4 e0       	ldi	r30, 0x04	; 4
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	de 01       	movw	r26, r28
 20e:	a7 54       	subi	r26, 0x47	; 71
 210:	be 4f       	sbci	r27, 0xFE	; 254
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	9a 95       	dec	r25
 218:	e1 f7       	brne	.-8      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 21a:	cf 5e       	subi	r28, 0xEF	; 239
 21c:	dd 4f       	sbci	r29, 0xFD	; 253
 21e:	e8 81       	ld	r30, Y
 220:	f9 81       	ldd	r31, Y+1	; 0x01
 222:	c1 51       	subi	r28, 0x11	; 17
 224:	d2 40       	sbci	r29, 0x02	; 2
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	49 eb       	ldi	r20, 0xB9	; 185
 22c:	51 e0       	ldi	r21, 0x01	; 1
 22e:	4c 0f       	add	r20, r28
 230:	5d 1f       	adc	r21, r29
 232:	e4 0f       	add	r30, r20
 234:	f5 1f       	adc	r31, r21
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	95 95       	asr	r25
 23a:	95 95       	asr	r25
 23c:	95 95       	asr	r25
 23e:	95 95       	asr	r25
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	89 2b       	or	r24, r25
 244:	f9 01       	movw	r30, r18
 246:	80 83       	st	Z, r24
 248:	11 c3       	rjmp	.+1570   	; 0x86c <__stack+0x36d>
		
	} else if(pos==1){
 24a:	61 30       	cpi	r22, 0x01	; 1
 24c:	71 05       	cpc	r23, r1
 24e:	09 f0       	breq	.+2      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 250:	9b c0       	rjmp	.+310    	; 0x388 <__EEPROM_REGION_LENGTH__+0x188>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&ValueArray[i])<<4);
 252:	4c ee       	ldi	r20, 0xEC	; 236
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	fa 01       	movw	r30, r20
 258:	20 81       	ld	r18, Z
 25a:	86 e1       	ldi	r24, 0x16	; 22
 25c:	e4 e0       	ldi	r30, 0x04	; 4
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	de 01       	movw	r26, r28
 262:	ad 55       	subi	r26, 0x5D	; 93
 264:	be 4f       	sbci	r27, 0xFE	; 254
 266:	01 90       	ld	r0, Z+
 268:	0d 92       	st	X+, r0
 26a:	8a 95       	dec	r24
 26c:	e1 f7       	brne	.-8      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 26e:	cf 5e       	subi	r28, 0xEF	; 239
 270:	dd 4f       	sbci	r29, 0xFD	; 253
 272:	e8 81       	ld	r30, Y
 274:	f9 81       	ldd	r31, Y+1	; 0x01
 276:	c1 51       	subi	r28, 0x11	; 17
 278:	d2 40       	sbci	r29, 0x02	; 2
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	83 ea       	ldi	r24, 0xA3	; 163
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	8c 0f       	add	r24, r28
 284:	9d 1f       	adc	r25, r29
 286:	e8 0f       	add	r30, r24
 288:	f9 1f       	adc	r31, r25
 28a:	80 81       	ld	r24, Z
 28c:	91 81       	ldd	r25, Z+1	; 0x01
 28e:	82 95       	swap	r24
 290:	92 95       	swap	r25
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	98 27       	eor	r25, r24
 296:	80 7f       	andi	r24, 0xF0	; 240
 298:	98 27       	eor	r25, r24
 29a:	2f 70       	andi	r18, 0x0F	; 15
 29c:	82 2b       	or	r24, r18
 29e:	fa 01       	movw	r30, r20
 2a0:	80 83       	st	Z, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 2a2:	21 ef       	ldi	r18, 0xF1	; 241
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	f9 01       	movw	r30, r18
 2a8:	80 81       	ld	r24, Z
 2aa:	96 e1       	ldi	r25, 0x16	; 22
 2ac:	e4 e0       	ldi	r30, 0x04	; 4
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	de 01       	movw	r26, r28
 2b2:	a3 57       	subi	r26, 0x73	; 115
 2b4:	be 4f       	sbci	r27, 0xFE	; 254
 2b6:	01 90       	ld	r0, Z+
 2b8:	0d 92       	st	X+, r0
 2ba:	9a 95       	dec	r25
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
 2be:	cf 5e       	subi	r28, 0xEF	; 239
 2c0:	dd 4f       	sbci	r29, 0xFD	; 253
 2c2:	e8 81       	ld	r30, Y
 2c4:	f9 81       	ldd	r31, Y+1	; 0x01
 2c6:	c1 51       	subi	r28, 0x11	; 17
 2c8:	d2 40       	sbci	r29, 0x02	; 2
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	4d e8       	ldi	r20, 0x8D	; 141
 2d0:	51 e0       	ldi	r21, 0x01	; 1
 2d2:	4c 0f       	add	r20, r28
 2d4:	5d 1f       	adc	r21, r29
 2d6:	e4 0f       	add	r30, r20
 2d8:	f5 1f       	adc	r31, r21
 2da:	90 81       	ld	r25, Z
 2dc:	90 7f       	andi	r25, 0xF0	; 240
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 2b       	or	r24, r25
 2e2:	f9 01       	movw	r30, r18
 2e4:	80 83       	st	Z, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 2e6:	46 ef       	ldi	r20, 0xF6	; 246
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	fa 01       	movw	r30, r20
 2ec:	20 81       	ld	r18, Z
 2ee:	86 e1       	ldi	r24, 0x16	; 22
 2f0:	e4 e0       	ldi	r30, 0x04	; 4
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	de 01       	movw	r26, r28
 2f6:	a9 58       	subi	r26, 0x89	; 137
 2f8:	be 4f       	sbci	r27, 0xFE	; 254
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
 302:	cf 5e       	subi	r28, 0xEF	; 239
 304:	dd 4f       	sbci	r29, 0xFD	; 253
 306:	e8 81       	ld	r30, Y
 308:	f9 81       	ldd	r31, Y+1	; 0x01
 30a:	c1 51       	subi	r28, 0x11	; 17
 30c:	d2 40       	sbci	r29, 0x02	; 2
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	87 e7       	ldi	r24, 0x77	; 119
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	8c 0f       	add	r24, r28
 318:	9d 1f       	adc	r25, r29
 31a:	e8 0f       	add	r30, r24
 31c:	f9 1f       	adc	r31, r25
 31e:	80 81       	ld	r24, Z
 320:	91 81       	ldd	r25, Z+1	; 0x01
 322:	88 27       	eor	r24, r24
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	95 95       	asr	r25
 334:	87 95       	ror	r24
 336:	2f 70       	andi	r18, 0x0F	; 15
 338:	82 2b       	or	r24, r18
 33a:	fa 01       	movw	r30, r20
 33c:	80 83       	st	Z, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 33e:	4b ef       	ldi	r20, 0xFB	; 251
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	fa 01       	movw	r30, r20
 344:	80 81       	ld	r24, Z
 346:	96 e1       	ldi	r25, 0x16	; 22
 348:	e4 e0       	ldi	r30, 0x04	; 4
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	de 01       	movw	r26, r28
 34e:	af 59       	subi	r26, 0x9F	; 159
 350:	be 4f       	sbci	r27, 0xFE	; 254
 352:	01 90       	ld	r0, Z+
 354:	0d 92       	st	X+, r0
 356:	9a 95       	dec	r25
 358:	e1 f7       	brne	.-8      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
 35a:	cf 5e       	subi	r28, 0xEF	; 239
 35c:	dd 4f       	sbci	r29, 0xFD	; 253
 35e:	e8 81       	ld	r30, Y
 360:	f9 81       	ldd	r31, Y+1	; 0x01
 362:	c1 51       	subi	r28, 0x11	; 17
 364:	d2 40       	sbci	r29, 0x02	; 2
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	21 e6       	ldi	r18, 0x61	; 97
 36c:	31 e0       	ldi	r19, 0x01	; 1
 36e:	2c 0f       	add	r18, r28
 370:	3d 1f       	adc	r19, r29
 372:	e2 0f       	add	r30, r18
 374:	f3 1f       	adc	r31, r19
 376:	20 81       	ld	r18, Z
 378:	31 81       	ldd	r19, Z+1	; 0x01
 37a:	22 27       	eor	r18, r18
 37c:	30 7f       	andi	r19, 0xF0	; 240
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	83 2b       	or	r24, r19
 382:	fa 01       	movw	r30, r20
 384:	80 83       	st	Z, r24
 386:	72 c2       	rjmp	.+1252   	; 0x86c <__stack+0x36d>
	} else if(pos==2){
 388:	62 30       	cpi	r22, 0x02	; 2
 38a:	71 05       	cpc	r23, r1
 38c:	09 f0       	breq	.+2      	; 0x390 <__EEPROM_REGION_LENGTH__+0x190>
 38e:	98 c0       	rjmp	.+304    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&ValueArray[i])<<0;
 390:	2d ee       	ldi	r18, 0xED	; 237
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	80 81       	ld	r24, Z
 398:	96 e1       	ldi	r25, 0x16	; 22
 39a:	e4 e0       	ldi	r30, 0x04	; 4
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	de 01       	movw	r26, r28
 3a0:	a5 5b       	subi	r26, 0xB5	; 181
 3a2:	be 4f       	sbci	r27, 0xFE	; 254
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	9a 95       	dec	r25
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 3ac:	cf 5e       	subi	r28, 0xEF	; 239
 3ae:	dd 4f       	sbci	r29, 0xFD	; 253
 3b0:	e8 81       	ld	r30, Y
 3b2:	f9 81       	ldd	r31, Y+1	; 0x01
 3b4:	c1 51       	subi	r28, 0x11	; 17
 3b6:	d2 40       	sbci	r29, 0x02	; 2
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	4b e4       	ldi	r20, 0x4B	; 75
 3be:	51 e0       	ldi	r21, 0x01	; 1
 3c0:	4c 0f       	add	r20, r28
 3c2:	5d 1f       	adc	r21, r29
 3c4:	e4 0f       	add	r30, r20
 3c6:	f5 1f       	adc	r31, r21
 3c8:	90 81       	ld	r25, Z
 3ca:	9f 70       	andi	r25, 0x0F	; 15
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	89 2b       	or	r24, r25
 3d0:	f9 01       	movw	r30, r18
 3d2:	80 83       	st	Z, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 3d4:	42 ef       	ldi	r20, 0xF2	; 242
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	fa 01       	movw	r30, r20
 3da:	20 81       	ld	r18, Z
 3dc:	86 e1       	ldi	r24, 0x16	; 22
 3de:	e4 e0       	ldi	r30, 0x04	; 4
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	de 01       	movw	r26, r28
 3e4:	ab 5c       	subi	r26, 0xCB	; 203
 3e6:	be 4f       	sbci	r27, 0xFE	; 254
 3e8:	01 90       	ld	r0, Z+
 3ea:	0d 92       	st	X+, r0
 3ec:	8a 95       	dec	r24
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 3f0:	cf 5e       	subi	r28, 0xEF	; 239
 3f2:	dd 4f       	sbci	r29, 0xFD	; 253
 3f4:	e8 81       	ld	r30, Y
 3f6:	f9 81       	ldd	r31, Y+1	; 0x01
 3f8:	c1 51       	subi	r28, 0x11	; 17
 3fa:	d2 40       	sbci	r29, 0x02	; 2
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	85 e3       	ldi	r24, 0x35	; 53
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	8c 0f       	add	r24, r28
 406:	9d 1f       	adc	r25, r29
 408:	e8 0f       	add	r30, r24
 40a:	f9 1f       	adc	r31, r25
 40c:	80 81       	ld	r24, Z
 40e:	91 81       	ldd	r25, Z+1	; 0x01
 410:	80 7f       	andi	r24, 0xF0	; 240
 412:	99 27       	eor	r25, r25
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	95 95       	asr	r25
 422:	87 95       	ror	r24
 424:	20 7f       	andi	r18, 0xF0	; 240
 426:	82 2b       	or	r24, r18
 428:	fa 01       	movw	r30, r20
 42a:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 42c:	47 ef       	ldi	r20, 0xF7	; 247
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	fa 01       	movw	r30, r20
 432:	80 81       	ld	r24, Z
 434:	96 e1       	ldi	r25, 0x16	; 22
 436:	e4 e0       	ldi	r30, 0x04	; 4
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	de 01       	movw	r26, r28
 43c:	a1 5e       	subi	r26, 0xE1	; 225
 43e:	be 4f       	sbci	r27, 0xFE	; 254
 440:	01 90       	ld	r0, Z+
 442:	0d 92       	st	X+, r0
 444:	9a 95       	dec	r25
 446:	e1 f7       	brne	.-8      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 448:	cf 5e       	subi	r28, 0xEF	; 239
 44a:	dd 4f       	sbci	r29, 0xFD	; 253
 44c:	e8 81       	ld	r30, Y
 44e:	f9 81       	ldd	r31, Y+1	; 0x01
 450:	c1 51       	subi	r28, 0x11	; 17
 452:	d2 40       	sbci	r29, 0x02	; 2
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	2f e1       	ldi	r18, 0x1F	; 31
 45a:	31 e0       	ldi	r19, 0x01	; 1
 45c:	2c 0f       	add	r18, r28
 45e:	3d 1f       	adc	r19, r29
 460:	e2 0f       	add	r30, r18
 462:	f3 1f       	adc	r31, r19
 464:	20 81       	ld	r18, Z
 466:	31 81       	ldd	r19, Z+1	; 0x01
 468:	22 27       	eor	r18, r18
 46a:	3f 70       	andi	r19, 0x0F	; 15
 46c:	80 7f       	andi	r24, 0xF0	; 240
 46e:	83 2b       	or	r24, r19
 470:	fa 01       	movw	r30, r20
 472:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 474:	2c ef       	ldi	r18, 0xFC	; 252
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	80 81       	ld	r24, Z
 47c:	96 e1       	ldi	r25, 0x16	; 22
 47e:	e4 e0       	ldi	r30, 0x04	; 4
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	de 01       	movw	r26, r28
 484:	a7 5f       	subi	r26, 0xF7	; 247
 486:	be 4f       	sbci	r27, 0xFE	; 254
 488:	01 90       	ld	r0, Z+
 48a:	0d 92       	st	X+, r0
 48c:	9a 95       	dec	r25
 48e:	e1 f7       	brne	.-8      	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 490:	cf 5e       	subi	r28, 0xEF	; 239
 492:	dd 4f       	sbci	r29, 0xFD	; 253
 494:	e8 81       	ld	r30, Y
 496:	f9 81       	ldd	r31, Y+1	; 0x01
 498:	c1 51       	subi	r28, 0x11	; 17
 49a:	d2 40       	sbci	r29, 0x02	; 2
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	49 e0       	ldi	r20, 0x09	; 9
 4a2:	51 e0       	ldi	r21, 0x01	; 1
 4a4:	4c 0f       	add	r20, r28
 4a6:	5d 1f       	adc	r21, r29
 4a8:	e4 0f       	add	r30, r20
 4aa:	f5 1f       	adc	r31, r21
 4ac:	91 81       	ldd	r25, Z+1	; 0x01
 4ae:	95 95       	asr	r25
 4b0:	95 95       	asr	r25
 4b2:	95 95       	asr	r25
 4b4:	95 95       	asr	r25
 4b6:	80 7f       	andi	r24, 0xF0	; 240
 4b8:	89 2b       	or	r24, r25
 4ba:	f9 01       	movw	r30, r18
 4bc:	80 83       	st	Z, r24
 4be:	d6 c1       	rjmp	.+940    	; 0x86c <__stack+0x36d>
		
	} else if(pos==3){
 4c0:	63 30       	cpi	r22, 0x03	; 3
 4c2:	71 05       	cpc	r23, r1
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__DATA_REGION_LENGTH__+0xc8>
 4c6:	9b c0       	rjmp	.+310    	; 0x5fe <__stack+0xff>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&ValueArray[i])<<4);
 4c8:	4d ee       	ldi	r20, 0xED	; 237
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	fa 01       	movw	r30, r20
 4ce:	20 81       	ld	r18, Z
 4d0:	86 e1       	ldi	r24, 0x16	; 22
 4d2:	e4 e0       	ldi	r30, 0x04	; 4
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	de 01       	movw	r26, r28
 4d8:	ad 50       	subi	r26, 0x0D	; 13
 4da:	bf 4f       	sbci	r27, 0xFF	; 255
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 4e4:	cf 5e       	subi	r28, 0xEF	; 239
 4e6:	dd 4f       	sbci	r29, 0xFD	; 253
 4e8:	e8 81       	ld	r30, Y
 4ea:	f9 81       	ldd	r31, Y+1	; 0x01
 4ec:	c1 51       	subi	r28, 0x11	; 17
 4ee:	d2 40       	sbci	r29, 0x02	; 2
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	83 ef       	ldi	r24, 0xF3	; 243
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	8c 0f       	add	r24, r28
 4fa:	9d 1f       	adc	r25, r29
 4fc:	e8 0f       	add	r30, r24
 4fe:	f9 1f       	adc	r31, r25
 500:	80 81       	ld	r24, Z
 502:	91 81       	ldd	r25, Z+1	; 0x01
 504:	82 95       	swap	r24
 506:	92 95       	swap	r25
 508:	90 7f       	andi	r25, 0xF0	; 240
 50a:	98 27       	eor	r25, r24
 50c:	80 7f       	andi	r24, 0xF0	; 240
 50e:	98 27       	eor	r25, r24
 510:	2f 70       	andi	r18, 0x0F	; 15
 512:	82 2b       	or	r24, r18
 514:	fa 01       	movw	r30, r20
 516:	80 83       	st	Z, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 518:	22 ef       	ldi	r18, 0xF2	; 242
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	80 81       	ld	r24, Z
 520:	96 e1       	ldi	r25, 0x16	; 22
 522:	e4 e0       	ldi	r30, 0x04	; 4
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	de 01       	movw	r26, r28
 528:	a3 52       	subi	r26, 0x23	; 35
 52a:	bf 4f       	sbci	r27, 0xFF	; 255
 52c:	01 90       	ld	r0, Z+
 52e:	0d 92       	st	X+, r0
 530:	9a 95       	dec	r25
 532:	e1 f7       	brne	.-8      	; 0x52c <__stack+0x2d>
 534:	cf 5e       	subi	r28, 0xEF	; 239
 536:	dd 4f       	sbci	r29, 0xFD	; 253
 538:	e8 81       	ld	r30, Y
 53a:	f9 81       	ldd	r31, Y+1	; 0x01
 53c:	c1 51       	subi	r28, 0x11	; 17
 53e:	d2 40       	sbci	r29, 0x02	; 2
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	4d ed       	ldi	r20, 0xDD	; 221
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	4c 0f       	add	r20, r28
 54a:	5d 1f       	adc	r21, r29
 54c:	e4 0f       	add	r30, r20
 54e:	f5 1f       	adc	r31, r21
 550:	90 81       	ld	r25, Z
 552:	90 7f       	andi	r25, 0xF0	; 240
 554:	8f 70       	andi	r24, 0x0F	; 15
 556:	89 2b       	or	r24, r25
 558:	f9 01       	movw	r30, r18
 55a:	80 83       	st	Z, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 55c:	47 ef       	ldi	r20, 0xF7	; 247
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	fa 01       	movw	r30, r20
 562:	20 81       	ld	r18, Z
 564:	86 e1       	ldi	r24, 0x16	; 22
 566:	e4 e0       	ldi	r30, 0x04	; 4
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	de 01       	movw	r26, r28
 56c:	a9 53       	subi	r26, 0x39	; 57
 56e:	bf 4f       	sbci	r27, 0xFF	; 255
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	8a 95       	dec	r24
 576:	e1 f7       	brne	.-8      	; 0x570 <__stack+0x71>
 578:	cf 5e       	subi	r28, 0xEF	; 239
 57a:	dd 4f       	sbci	r29, 0xFD	; 253
 57c:	e8 81       	ld	r30, Y
 57e:	f9 81       	ldd	r31, Y+1	; 0x01
 580:	c1 51       	subi	r28, 0x11	; 17
 582:	d2 40       	sbci	r29, 0x02	; 2
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	87 ec       	ldi	r24, 0xC7	; 199
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	8c 0f       	add	r24, r28
 58e:	9d 1f       	adc	r25, r29
 590:	e8 0f       	add	r30, r24
 592:	f9 1f       	adc	r31, r25
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	88 27       	eor	r24, r24
 59a:	9f 70       	andi	r25, 0x0F	; 15
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	95 95       	asr	r25
 5a2:	87 95       	ror	r24
 5a4:	95 95       	asr	r25
 5a6:	87 95       	ror	r24
 5a8:	95 95       	asr	r25
 5aa:	87 95       	ror	r24
 5ac:	2f 70       	andi	r18, 0x0F	; 15
 5ae:	82 2b       	or	r24, r18
 5b0:	fa 01       	movw	r30, r20
 5b2:	80 83       	st	Z, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 5b4:	4c ef       	ldi	r20, 0xFC	; 252
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	fa 01       	movw	r30, r20
 5ba:	80 81       	ld	r24, Z
 5bc:	96 e1       	ldi	r25, 0x16	; 22
 5be:	e4 e0       	ldi	r30, 0x04	; 4
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	de 01       	movw	r26, r28
 5c4:	af 54       	subi	r26, 0x4F	; 79
 5c6:	bf 4f       	sbci	r27, 0xFF	; 255
 5c8:	01 90       	ld	r0, Z+
 5ca:	0d 92       	st	X+, r0
 5cc:	9a 95       	dec	r25
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__stack+0xc9>
 5d0:	cf 5e       	subi	r28, 0xEF	; 239
 5d2:	dd 4f       	sbci	r29, 0xFD	; 253
 5d4:	e8 81       	ld	r30, Y
 5d6:	f9 81       	ldd	r31, Y+1	; 0x01
 5d8:	c1 51       	subi	r28, 0x11	; 17
 5da:	d2 40       	sbci	r29, 0x02	; 2
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	21 eb       	ldi	r18, 0xB1	; 177
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	2c 0f       	add	r18, r28
 5e6:	3d 1f       	adc	r19, r29
 5e8:	e2 0f       	add	r30, r18
 5ea:	f3 1f       	adc	r31, r19
 5ec:	20 81       	ld	r18, Z
 5ee:	31 81       	ldd	r19, Z+1	; 0x01
 5f0:	22 27       	eor	r18, r18
 5f2:	30 7f       	andi	r19, 0xF0	; 240
 5f4:	8f 70       	andi	r24, 0x0F	; 15
 5f6:	83 2b       	or	r24, r19
 5f8:	fa 01       	movw	r30, r20
 5fa:	80 83       	st	Z, r24
 5fc:	37 c1       	rjmp	.+622    	; 0x86c <__stack+0x36d>
		
	} else if(pos==4){
 5fe:	64 30       	cpi	r22, 0x04	; 4
 600:	71 05       	cpc	r23, r1
 602:	09 f0       	breq	.+2      	; 0x606 <__stack+0x107>
 604:	98 c0       	rjmp	.+304    	; 0x736 <__stack+0x237>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&ValueArray[i])<<0;
 606:	2e ee       	ldi	r18, 0xEE	; 238
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	80 81       	ld	r24, Z
 60e:	96 e1       	ldi	r25, 0x16	; 22
 610:	e4 e0       	ldi	r30, 0x04	; 4
 612:	f1 e0       	ldi	r31, 0x01	; 1
 614:	de 01       	movw	r26, r28
 616:	a5 56       	subi	r26, 0x65	; 101
 618:	bf 4f       	sbci	r27, 0xFF	; 255
 61a:	01 90       	ld	r0, Z+
 61c:	0d 92       	st	X+, r0
 61e:	9a 95       	dec	r25
 620:	e1 f7       	brne	.-8      	; 0x61a <__stack+0x11b>
 622:	cf 5e       	subi	r28, 0xEF	; 239
 624:	dd 4f       	sbci	r29, 0xFD	; 253
 626:	e8 81       	ld	r30, Y
 628:	f9 81       	ldd	r31, Y+1	; 0x01
 62a:	c1 51       	subi	r28, 0x11	; 17
 62c:	d2 40       	sbci	r29, 0x02	; 2
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	4b e9       	ldi	r20, 0x9B	; 155
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	4c 0f       	add	r20, r28
 638:	5d 1f       	adc	r21, r29
 63a:	e4 0f       	add	r30, r20
 63c:	f5 1f       	adc	r31, r21
 63e:	90 81       	ld	r25, Z
 640:	9f 70       	andi	r25, 0x0F	; 15
 642:	80 7f       	andi	r24, 0xF0	; 240
 644:	89 2b       	or	r24, r25
 646:	f9 01       	movw	r30, r18
 648:	80 83       	st	Z, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 64a:	43 ef       	ldi	r20, 0xF3	; 243
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	fa 01       	movw	r30, r20
 650:	20 81       	ld	r18, Z
 652:	86 e1       	ldi	r24, 0x16	; 22
 654:	e4 e0       	ldi	r30, 0x04	; 4
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	de 01       	movw	r26, r28
 65a:	ab 57       	subi	r26, 0x7B	; 123
 65c:	bf 4f       	sbci	r27, 0xFF	; 255
 65e:	01 90       	ld	r0, Z+
 660:	0d 92       	st	X+, r0
 662:	8a 95       	dec	r24
 664:	e1 f7       	brne	.-8      	; 0x65e <__stack+0x15f>
 666:	cf 5e       	subi	r28, 0xEF	; 239
 668:	dd 4f       	sbci	r29, 0xFD	; 253
 66a:	e8 81       	ld	r30, Y
 66c:	f9 81       	ldd	r31, Y+1	; 0x01
 66e:	c1 51       	subi	r28, 0x11	; 17
 670:	d2 40       	sbci	r29, 0x02	; 2
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	85 e8       	ldi	r24, 0x85	; 133
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	8c 0f       	add	r24, r28
 67c:	9d 1f       	adc	r25, r29
 67e:	e8 0f       	add	r30, r24
 680:	f9 1f       	adc	r31, r25
 682:	80 81       	ld	r24, Z
 684:	91 81       	ldd	r25, Z+1	; 0x01
 686:	80 7f       	andi	r24, 0xF0	; 240
 688:	99 27       	eor	r25, r25
 68a:	95 95       	asr	r25
 68c:	87 95       	ror	r24
 68e:	95 95       	asr	r25
 690:	87 95       	ror	r24
 692:	95 95       	asr	r25
 694:	87 95       	ror	r24
 696:	95 95       	asr	r25
 698:	87 95       	ror	r24
 69a:	20 7f       	andi	r18, 0xF0	; 240
 69c:	82 2b       	or	r24, r18
 69e:	fa 01       	movw	r30, r20
 6a0:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 6a2:	48 ef       	ldi	r20, 0xF8	; 248
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	fa 01       	movw	r30, r20
 6a8:	80 81       	ld	r24, Z
 6aa:	96 e1       	ldi	r25, 0x16	; 22
 6ac:	e4 e0       	ldi	r30, 0x04	; 4
 6ae:	f1 e0       	ldi	r31, 0x01	; 1
 6b0:	de 01       	movw	r26, r28
 6b2:	a1 59       	subi	r26, 0x91	; 145
 6b4:	bf 4f       	sbci	r27, 0xFF	; 255
 6b6:	01 90       	ld	r0, Z+
 6b8:	0d 92       	st	X+, r0
 6ba:	9a 95       	dec	r25
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <__stack+0x1b7>
 6be:	cf 5e       	subi	r28, 0xEF	; 239
 6c0:	dd 4f       	sbci	r29, 0xFD	; 253
 6c2:	e8 81       	ld	r30, Y
 6c4:	f9 81       	ldd	r31, Y+1	; 0x01
 6c6:	c1 51       	subi	r28, 0x11	; 17
 6c8:	d2 40       	sbci	r29, 0x02	; 2
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	2f e6       	ldi	r18, 0x6F	; 111
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	2c 0f       	add	r18, r28
 6d4:	3d 1f       	adc	r19, r29
 6d6:	e2 0f       	add	r30, r18
 6d8:	f3 1f       	adc	r31, r19
 6da:	20 81       	ld	r18, Z
 6dc:	31 81       	ldd	r19, Z+1	; 0x01
 6de:	22 27       	eor	r18, r18
 6e0:	3f 70       	andi	r19, 0x0F	; 15
 6e2:	80 7f       	andi	r24, 0xF0	; 240
 6e4:	83 2b       	or	r24, r19
 6e6:	fa 01       	movw	r30, r20
 6e8:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 6ea:	2d ef       	ldi	r18, 0xFD	; 253
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	f9 01       	movw	r30, r18
 6f0:	80 81       	ld	r24, Z
 6f2:	96 e1       	ldi	r25, 0x16	; 22
 6f4:	e4 e0       	ldi	r30, 0x04	; 4
 6f6:	f1 e0       	ldi	r31, 0x01	; 1
 6f8:	de 01       	movw	r26, r28
 6fa:	a7 5a       	subi	r26, 0xA7	; 167
 6fc:	bf 4f       	sbci	r27, 0xFF	; 255
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	9a 95       	dec	r25
 704:	e1 f7       	brne	.-8      	; 0x6fe <__stack+0x1ff>
 706:	cf 5e       	subi	r28, 0xEF	; 239
 708:	dd 4f       	sbci	r29, 0xFD	; 253
 70a:	e8 81       	ld	r30, Y
 70c:	f9 81       	ldd	r31, Y+1	; 0x01
 70e:	c1 51       	subi	r28, 0x11	; 17
 710:	d2 40       	sbci	r29, 0x02	; 2
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	49 e5       	ldi	r20, 0x59	; 89
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	4c 0f       	add	r20, r28
 71c:	5d 1f       	adc	r21, r29
 71e:	e4 0f       	add	r30, r20
 720:	f5 1f       	adc	r31, r21
 722:	91 81       	ldd	r25, Z+1	; 0x01
 724:	95 95       	asr	r25
 726:	95 95       	asr	r25
 728:	95 95       	asr	r25
 72a:	95 95       	asr	r25
 72c:	80 7f       	andi	r24, 0xF0	; 240
 72e:	89 2b       	or	r24, r25
 730:	f9 01       	movw	r30, r18
 732:	80 83       	st	Z, r24
 734:	9b c0       	rjmp	.+310    	; 0x86c <__stack+0x36d>
		
	} else if(pos==5){
 736:	65 30       	cpi	r22, 0x05	; 5
 738:	71 05       	cpc	r23, r1
 73a:	09 f0       	breq	.+2      	; 0x73e <__stack+0x23f>
 73c:	97 c0       	rjmp	.+302    	; 0x86c <__stack+0x36d>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&ValueArray[i])<<4);
 73e:	4e ee       	ldi	r20, 0xEE	; 238
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	fa 01       	movw	r30, r20
 744:	20 81       	ld	r18, Z
 746:	86 e1       	ldi	r24, 0x16	; 22
 748:	e4 e0       	ldi	r30, 0x04	; 4
 74a:	f1 e0       	ldi	r31, 0x01	; 1
 74c:	de 01       	movw	r26, r28
 74e:	ad 5b       	subi	r26, 0xBD	; 189
 750:	bf 4f       	sbci	r27, 0xFF	; 255
 752:	01 90       	ld	r0, Z+
 754:	0d 92       	st	X+, r0
 756:	8a 95       	dec	r24
 758:	e1 f7       	brne	.-8      	; 0x752 <__stack+0x253>
 75a:	cf 5e       	subi	r28, 0xEF	; 239
 75c:	dd 4f       	sbci	r29, 0xFD	; 253
 75e:	e8 81       	ld	r30, Y
 760:	f9 81       	ldd	r31, Y+1	; 0x01
 762:	c1 51       	subi	r28, 0x11	; 17
 764:	d2 40       	sbci	r29, 0x02	; 2
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	83 e4       	ldi	r24, 0x43	; 67
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	8c 0f       	add	r24, r28
 770:	9d 1f       	adc	r25, r29
 772:	e8 0f       	add	r30, r24
 774:	f9 1f       	adc	r31, r25
 776:	80 81       	ld	r24, Z
 778:	91 81       	ldd	r25, Z+1	; 0x01
 77a:	82 95       	swap	r24
 77c:	92 95       	swap	r25
 77e:	90 7f       	andi	r25, 0xF0	; 240
 780:	98 27       	eor	r25, r24
 782:	80 7f       	andi	r24, 0xF0	; 240
 784:	98 27       	eor	r25, r24
 786:	2f 70       	andi	r18, 0x0F	; 15
 788:	82 2b       	or	r24, r18
 78a:	fa 01       	movw	r30, r20
 78c:	80 83       	st	Z, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 78e:	23 ef       	ldi	r18, 0xF3	; 243
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	f9 01       	movw	r30, r18
 794:	80 81       	ld	r24, Z
 796:	96 e1       	ldi	r25, 0x16	; 22
 798:	e4 e0       	ldi	r30, 0x04	; 4
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	de 01       	movw	r26, r28
 79e:	9d 96       	adiw	r26, 0x2d	; 45
 7a0:	01 90       	ld	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	9a 95       	dec	r25
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <__stack+0x2a1>
 7a8:	cf 5e       	subi	r28, 0xEF	; 239
 7aa:	dd 4f       	sbci	r29, 0xFD	; 253
 7ac:	e8 81       	ld	r30, Y
 7ae:	f9 81       	ldd	r31, Y+1	; 0x01
 7b0:	c1 51       	subi	r28, 0x11	; 17
 7b2:	d2 40       	sbci	r29, 0x02	; 2
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	4c 0f       	add	r20, r28
 7be:	5d 1f       	adc	r21, r29
 7c0:	e4 0f       	add	r30, r20
 7c2:	f5 1f       	adc	r31, r21
 7c4:	94 a5       	ldd	r25, Z+44	; 0x2c
 7c6:	90 7f       	andi	r25, 0xF0	; 240
 7c8:	8f 70       	andi	r24, 0x0F	; 15
 7ca:	89 2b       	or	r24, r25
 7cc:	f9 01       	movw	r30, r18
 7ce:	80 83       	st	Z, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 7d0:	48 ef       	ldi	r20, 0xF8	; 248
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	fa 01       	movw	r30, r20
 7d6:	20 81       	ld	r18, Z
 7d8:	86 e1       	ldi	r24, 0x16	; 22
 7da:	e4 e0       	ldi	r30, 0x04	; 4
 7dc:	f1 e0       	ldi	r31, 0x01	; 1
 7de:	de 01       	movw	r26, r28
 7e0:	57 96       	adiw	r26, 0x17	; 23
 7e2:	01 90       	ld	r0, Z+
 7e4:	0d 92       	st	X+, r0
 7e6:	8a 95       	dec	r24
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <__stack+0x2e3>
 7ea:	cf 5e       	subi	r28, 0xEF	; 239
 7ec:	dd 4f       	sbci	r29, 0xFD	; 253
 7ee:	e8 81       	ld	r30, Y
 7f0:	f9 81       	ldd	r31, Y+1	; 0x01
 7f2:	c1 51       	subi	r28, 0x11	; 17
 7f4:	d2 40       	sbci	r29, 0x02	; 2
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	8c 0f       	add	r24, r28
 800:	9d 1f       	adc	r25, r29
 802:	e8 0f       	add	r30, r24
 804:	f9 1f       	adc	r31, r25
 806:	86 89       	ldd	r24, Z+22	; 0x16
 808:	97 89       	ldd	r25, Z+23	; 0x17
 80a:	88 27       	eor	r24, r24
 80c:	9f 70       	andi	r25, 0x0F	; 15
 80e:	95 95       	asr	r25
 810:	87 95       	ror	r24
 812:	95 95       	asr	r25
 814:	87 95       	ror	r24
 816:	95 95       	asr	r25
 818:	87 95       	ror	r24
 81a:	95 95       	asr	r25
 81c:	87 95       	ror	r24
 81e:	2f 70       	andi	r18, 0x0F	; 15
 820:	82 2b       	or	r24, r18
 822:	fa 01       	movw	r30, r20
 824:	80 83       	st	Z, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 826:	4d ef       	ldi	r20, 0xFD	; 253
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	fa 01       	movw	r30, r20
 82c:	80 81       	ld	r24, Z
 82e:	96 e1       	ldi	r25, 0x16	; 22
 830:	e4 e0       	ldi	r30, 0x04	; 4
 832:	f1 e0       	ldi	r31, 0x01	; 1
 834:	de 01       	movw	r26, r28
 836:	11 96       	adiw	r26, 0x01	; 1
 838:	01 90       	ld	r0, Z+
 83a:	0d 92       	st	X+, r0
 83c:	9a 95       	dec	r25
 83e:	e1 f7       	brne	.-8      	; 0x838 <__stack+0x339>
 840:	cf 5e       	subi	r28, 0xEF	; 239
 842:	dd 4f       	sbci	r29, 0xFD	; 253
 844:	e8 81       	ld	r30, Y
 846:	f9 81       	ldd	r31, Y+1	; 0x01
 848:	c1 51       	subi	r28, 0x11	; 17
 84a:	d2 40       	sbci	r29, 0x02	; 2
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	2c 0f       	add	r18, r28
 856:	3d 1f       	adc	r19, r29
 858:	e2 0f       	add	r30, r18
 85a:	f3 1f       	adc	r31, r19
 85c:	20 81       	ld	r18, Z
 85e:	31 81       	ldd	r19, Z+1	; 0x01
 860:	22 27       	eor	r18, r18
 862:	30 7f       	andi	r19, 0xF0	; 240
 864:	8f 70       	andi	r24, 0x0F	; 15
 866:	83 2b       	or	r24, r19
 868:	fa 01       	movw	r30, r20
 86a:	80 83       	st	Z, r24
		
	}
	

}
 86c:	ce 5e       	subi	r28, 0xEE	; 238
 86e:	dd 4f       	sbci	r29, 0xFD	; 253
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63
 878:	cd bf       	out	0x3d, r28	; 61
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <is_prime>:

bool is_prime(long i) {
 880:	cf 92       	push	r12
 882:	df 92       	push	r13
 884:	ef 92       	push	r14
 886:	ff 92       	push	r15
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	6b 01       	movw	r12, r22
 88e:	7c 01       	movw	r14, r24
	for(int j=2; j<i;j++){
 890:	83 e0       	ldi	r24, 0x03	; 3
 892:	c8 16       	cp	r12, r24
 894:	d1 04       	cpc	r13, r1
 896:	e1 04       	cpc	r14, r1
 898:	f1 04       	cpc	r15, r1
 89a:	74 f1       	brlt	.+92     	; 0x8f8 <is_prime+0x78>
		if(i%j==0){
 89c:	d7 01       	movw	r26, r14
 89e:	c6 01       	movw	r24, r12
 8a0:	81 70       	andi	r24, 0x01	; 1
 8a2:	99 27       	eor	r25, r25
 8a4:	aa 27       	eor	r26, r26
 8a6:	b0 78       	andi	r27, 0x80	; 128
 8a8:	bb 23       	and	r27, r27
 8aa:	54 f4       	brge	.+20     	; 0x8c0 <is_prime+0x40>
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	a1 09       	sbc	r26, r1
 8b0:	b1 09       	sbc	r27, r1
 8b2:	8e 6f       	ori	r24, 0xFE	; 254
 8b4:	9f 6f       	ori	r25, 0xFF	; 255
 8b6:	af 6f       	ori	r26, 0xFF	; 255
 8b8:	bf 6f       	ori	r27, 0xFF	; 255
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	a1 1d       	adc	r26, r1
 8be:	b1 1d       	adc	r27, r1
 8c0:	89 2b       	or	r24, r25
 8c2:	8a 2b       	or	r24, r26
 8c4:	8b 2b       	or	r24, r27
 8c6:	d1 f0       	breq	.+52     	; 0x8fc <is_prime+0x7c>
 8c8:	c2 e0       	ldi	r28, 0x02	; 2
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <is_prime+0x5e>
 8ce:	c7 01       	movw	r24, r14
 8d0:	b6 01       	movw	r22, r12
 8d2:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodsi4>
 8d6:	67 2b       	or	r22, r23
 8d8:	68 2b       	or	r22, r24
 8da:	69 2b       	or	r22, r25
 8dc:	89 f0       	breq	.+34     	; 0x900 <is_prime+0x80>
	

}

bool is_prime(long i) {
	for(int j=2; j<i;j++){
 8de:	21 96       	adiw	r28, 0x01	; 1
 8e0:	9e 01       	movw	r18, r28
 8e2:	0d 2e       	mov	r0, r29
 8e4:	00 0c       	add	r0, r0
 8e6:	44 0b       	sbc	r20, r20
 8e8:	55 0b       	sbc	r21, r21
 8ea:	2c 15       	cp	r18, r12
 8ec:	3d 05       	cpc	r19, r13
 8ee:	4e 05       	cpc	r20, r14
 8f0:	5f 05       	cpc	r21, r15
 8f2:	6c f3       	brlt	.-38     	; 0x8ce <is_prime+0x4e>
		if(i%j==0){
			return false;
			
		}
	}
	return true;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <is_prime+0x82>
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <is_prime+0x82>
}

bool is_prime(long i) {
	for(int j=2; j<i;j++){
		if(i%j==0){
			return false;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <is_prime+0x82>
 900:	80 e0       	ldi	r24, 0x00	; 0
			
		}
	}
	return true;
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	ff 90       	pop	r15
 908:	ef 90       	pop	r14
 90a:	df 90       	pop	r13
 90c:	cf 90       	pop	r12
 90e:	08 95       	ret

00000910 <printAt>:


void printAt(long num, int pos) {
 910:	8f 92       	push	r8
 912:	9f 92       	push	r9
 914:	af 92       	push	r10
 916:	bf 92       	push	r11
 918:	cf 92       	push	r12
 91a:	df 92       	push	r13
 91c:	ef 92       	push	r14
 91e:	ff 92       	push	r15
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	4b 01       	movw	r8, r22
 926:	5c 01       	movw	r10, r24
 928:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 92a:	24 e6       	ldi	r18, 0x64	; 100
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodsi4>
 936:	0f 2e       	mov	r0, r31
 938:	fa e0       	ldi	r31, 0x0A	; 10
 93a:	cf 2e       	mov	r12, r31
 93c:	d1 2c       	mov	r13, r1
 93e:	e1 2c       	mov	r14, r1
 940:	f1 2c       	mov	r15, r1
 942:	f0 2d       	mov	r31, r0
 944:	a7 01       	movw	r20, r14
 946:	96 01       	movw	r18, r12
 948:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodsi4>
 94c:	be 01       	movw	r22, r28
 94e:	80 e3       	ldi	r24, 0x30	; 48
 950:	82 0f       	add	r24, r18
 952:	0e 94 5f 00 	call	0xbe	; 0xbe <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 956:	21 96       	adiw	r28, 0x01	; 1
 958:	c5 01       	movw	r24, r10
 95a:	b4 01       	movw	r22, r8
 95c:	a7 01       	movw	r20, r14
 95e:	96 01       	movw	r18, r12
 960:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodsi4>
 964:	86 2f       	mov	r24, r22
 966:	be 01       	movw	r22, r28
 968:	80 5d       	subi	r24, 0xD0	; 208
 96a:	0e 94 5f 00 	call	0xbe	; 0xbe <writeChar>
}
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	ff 90       	pop	r15
 974:	ef 90       	pop	r14
 976:	df 90       	pop	r13
 978:	cf 90       	pop	r12
 97a:	bf 90       	pop	r11
 97c:	af 90       	pop	r10
 97e:	9f 90       	pop	r9
 980:	8f 90       	pop	r8
 982:	08 95       	ret

00000984 <computePrimes>:

void computePrimes(int pos) {
 984:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 986:	c1 2c       	mov	r12, r1
 988:	d1 2c       	mov	r13, r1
 98a:	76 01       	movw	r14, r12
 98c:	c3 94       	inc	r12
        if (is_prime(n)) {
 98e:	c7 01       	movw	r24, r14
 990:	b6 01       	movw	r22, r12
 992:	0e 94 40 04 	call	0x880	; 0x880 <is_prime>
 996:	88 23       	and	r24, r24
 998:	39 f0       	breq	.+14     	; 0x9a8 <computePrimes+0x24>
            printAt(n, pos);
 99a:	ae 01       	movw	r20, r28
 99c:	c7 01       	movw	r24, r14
 99e:	b6 01       	movw	r22, r12
 9a0:	0e 94 88 04 	call	0x910	; 0x910 <printAt>
            yield();
 9a4:	0e 94 a1 05 	call	0xb42	; 0xb42 <yield>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	c8 1a       	sub	r12, r24
 9ac:	d8 0a       	sbc	r13, r24
 9ae:	e8 0a       	sbc	r14, r24
 9b0:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
            yield();
        }
    }
 9b2:	ed cf       	rjmp	.-38     	; 0x98e <computePrimes+0xa>

000009b4 <main>:
}

int main() {
    LCD_Init();
 9b4:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
    spawn(computePrimes, 0);
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	82 ec       	ldi	r24, 0xC2	; 194
 9be:	94 e0       	ldi	r25, 0x04	; 4
 9c0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <spawn>
    computePrimes(3);
 9c4:	83 e0       	ldi	r24, 0x03	; 3
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 c2 04 	call	0x984	; 0x984 <computePrimes>

000009cc <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 9cc:	dc 01       	movw	r26, r24
 9ce:	15 96       	adiw	r26, 0x05	; 5
 9d0:	1c 92       	st	X, r1
 9d2:	1e 92       	st	-X, r1
 9d4:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 9d6:	db 01       	movw	r26, r22
 9d8:	ed 91       	ld	r30, X+
 9da:	fc 91       	ld	r31, X
 9dc:	11 97       	sbiw	r26, 0x01	; 1
 9de:	30 97       	sbiw	r30, 0x00	; 0
 9e0:	21 f4       	brne	.+8      	; 0x9ea <enqueue+0x1e>
        *queue = p;
 9e2:	8d 93       	st	X+, r24
 9e4:	9c 93       	st	X, r25
 9e6:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 9e8:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 9ea:	24 81       	ldd	r18, Z+4	; 0x04
 9ec:	35 81       	ldd	r19, Z+5	; 0x05
 9ee:	21 15       	cp	r18, r1
 9f0:	31 05       	cpc	r19, r1
 9f2:	d1 f7       	brne	.-12     	; 0x9e8 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 9f4:	95 83       	std	Z+5, r25	; 0x05
 9f6:	84 83       	std	Z+4, r24	; 0x04
 9f8:	08 95       	ret

000009fa <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <dispatch+0x6>
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	9a 83       	std	Y+2, r25	; 0x02
 a06:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 a08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a0c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a10:	06 96       	adiw	r24, 0x06	; 6
 a12:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <setjmp>
 a16:	89 2b       	or	r24, r25
 a18:	59 f4       	brne	.+22     	; 0xa30 <dispatch+0x36>
        current = next;
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	9a 81       	ldd	r25, Y+2	; 0x02
 a1e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a22:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 a26:	61 e0       	ldi	r22, 0x01	; 1
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	06 96       	adiw	r24, 0x06	; 6
 a2c:	0e 94 1b 06 	call	0xc36	; 0xc36 <longjmp>
    }
}
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	08 95       	ret

00000a3a <spawn>:

void spawn(void (* function)(int), int arg) {
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	00 d0       	rcall	.+0      	; 0xa40 <spawn+0x6>
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 a44:	f8 94       	cli
    if (!initialized) initialize();
 a46:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 a4a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 a4e:	23 2b       	or	r18, r19
 a50:	e1 f4       	brne	.+56     	; 0xa8a <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 a52:	28 ef       	ldi	r18, 0xF8	; 248
 a54:	31 e0       	ldi	r19, 0x01	; 1
 a56:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <threads+0x5>
 a5a:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <threads+0x4>
 a5e:	25 e6       	ldi	r18, 0x65	; 101
 a60:	32 e0       	ldi	r19, 0x02	; 2
 a62:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <threads+0x72>
 a66:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <threads+0x71>
 a6a:	22 ed       	ldi	r18, 0xD2	; 210
 a6c:	32 e0       	ldi	r19, 0x02	; 2
 a6e:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <threads+0xdf>
 a72:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 a76:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <threads+0x14c>
 a7a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14b>


    initialized = 1;
 a7e:	21 e0       	ldi	r18, 0x01	; 1
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 a86:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 a8a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 a8e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 a92:	3a 83       	std	Y+2, r19	; 0x02
 a94:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 a96:	23 2b       	or	r18, r19
 a98:	a9 f0       	breq	.+42     	; 0xac4 <spawn+0x8a>
        *queue = (*queue)->next;
 a9a:	e9 81       	ldd	r30, Y+1	; 0x01
 a9c:	fa 81       	ldd	r31, Y+2	; 0x02
 a9e:	44 81       	ldd	r20, Z+4	; 0x04
 aa0:	55 81       	ldd	r21, Z+5	; 0x05
 aa2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 aa6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 aaa:	91 83       	std	Z+1, r25	; 0x01
 aac:	80 83       	st	Z, r24
    newp->arg = arg;
 aae:	73 83       	std	Z+3, r23	; 0x03
 ab0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 ab2:	15 82       	std	Z+5, r1	; 0x05
 ab4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 ab6:	cf 01       	movw	r24, r30
 ab8:	06 96       	adiw	r24, 0x06	; 6
 aba:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <setjmp>
 abe:	01 97       	sbiw	r24, 0x01	; 1
 ac0:	49 f5       	brne	.+82     	; 0xb14 <spawn+0xda>
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <spawn+0x8c>
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <spawn+0x8a>
        ENABLE();
 ac6:	78 94       	sei
        current->function(current->arg);
 ac8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 acc:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ad0:	ed 91       	ld	r30, X+
 ad2:	fc 91       	ld	r31, X
 ad4:	11 97       	sbiw	r26, 0x01	; 1
 ad6:	12 96       	adiw	r26, 0x02	; 2
 ad8:	8d 91       	ld	r24, X+
 ada:	9c 91       	ld	r25, X
 adc:	13 97       	sbiw	r26, 0x03	; 3
 ade:	09 95       	icall
        DISABLE();
 ae0:	f8 94       	cli
        enqueue(current, &freeQ);
 ae2:	62 e0       	ldi	r22, 0x02	; 2
 ae4:	71 e0       	ldi	r23, 0x01	; 1
 ae6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 aea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 aee:	0e 94 e6 04 	call	0x9cc	; 0x9cc <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 af2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 af6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	51 f0       	breq	.+20     	; 0xb12 <spawn+0xd8>
        *queue = (*queue)->next;
 afe:	fc 01       	movw	r30, r24
 b00:	24 81       	ldd	r18, Z+4	; 0x04
 b02:	35 81       	ldd	r19, Z+5	; 0x05
 b04:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 b08:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 b0c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <dispatch>
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <spawn+0xda>
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <spawn+0xd8>
    }
    SETSTACK(&newp->context, &newp->stack);
 b14:	e9 81       	ldd	r30, Y+1	; 0x01
 b16:	fa 81       	ldd	r31, Y+2	; 0x02
 b18:	36 96       	adiw	r30, 0x06	; 6
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	9a 81       	ldd	r25, Y+2	; 0x02
 b1e:	87 59       	subi	r24, 0x97	; 151
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	91 8b       	std	Z+17, r25	; 0x11
 b24:	80 8b       	std	Z+16, r24	; 0x10
 b26:	93 8b       	std	Z+19, r25	; 0x13
 b28:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 b2a:	6c e1       	ldi	r22, 0x1C	; 28
 b2c:	71 e0       	ldi	r23, 0x01	; 1
 b2e:	89 81       	ldd	r24, Y+1	; 0x01
 b30:	9a 81       	ldd	r25, Y+2	; 0x02
 b32:	0e 94 e6 04 	call	0x9cc	; 0x9cc <enqueue>
    ENABLE();
 b36:	78 94       	sei
}
 b38:	0f 90       	pop	r0
 b3a:	0f 90       	pop	r0
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	08 95       	ret

00000b42 <yield>:

void yield(void) {
    enqueue(current,&readyQ);
 b42:	6c e1       	ldi	r22, 0x1C	; 28
 b44:	71 e0       	ldi	r23, 0x01	; 1
 b46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b4e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 b52:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 b56:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	51 f0       	breq	.+20     	; 0xb72 <yield+0x30>
        *queue = (*queue)->next;
 b5e:	fc 01       	movw	r30, r24
 b60:	24 81       	ldd	r18, Z+4	; 0x04
 b62:	35 81       	ldd	r19, Z+5	; 0x05
 b64:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 b68:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    ENABLE();
}

void yield(void) {
    enqueue(current,&readyQ);
    dispatch(dequeue(&readyQ));
 b6c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <dispatch>
}
 b70:	08 95       	ret
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <yield+0x30>

00000b74 <__divmodsi4>:
 b74:	05 2e       	mov	r0, r21
 b76:	97 fb       	bst	r25, 7
 b78:	1e f4       	brtc	.+6      	; 0xb80 <__divmodsi4+0xc>
 b7a:	00 94       	com	r0
 b7c:	0e 94 d1 05 	call	0xba2	; 0xba2 <__negsi2>
 b80:	57 fd       	sbrc	r21, 7
 b82:	07 d0       	rcall	.+14     	; 0xb92 <__divmodsi4_neg2>
 b84:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__udivmodsi4>
 b88:	07 fc       	sbrc	r0, 7
 b8a:	03 d0       	rcall	.+6      	; 0xb92 <__divmodsi4_neg2>
 b8c:	4e f4       	brtc	.+18     	; 0xba0 <__divmodsi4_exit>
 b8e:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__negsi2>

00000b92 <__divmodsi4_neg2>:
 b92:	50 95       	com	r21
 b94:	40 95       	com	r20
 b96:	30 95       	com	r19
 b98:	21 95       	neg	r18
 b9a:	3f 4f       	sbci	r19, 0xFF	; 255
 b9c:	4f 4f       	sbci	r20, 0xFF	; 255
 b9e:	5f 4f       	sbci	r21, 0xFF	; 255

00000ba0 <__divmodsi4_exit>:
 ba0:	08 95       	ret

00000ba2 <__negsi2>:
 ba2:	90 95       	com	r25
 ba4:	80 95       	com	r24
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	08 95       	ret

00000bb2 <__udivmodsi4>:
 bb2:	a1 e2       	ldi	r26, 0x21	; 33
 bb4:	1a 2e       	mov	r1, r26
 bb6:	aa 1b       	sub	r26, r26
 bb8:	bb 1b       	sub	r27, r27
 bba:	fd 01       	movw	r30, r26
 bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <__udivmodsi4_ep>

00000bbe <__udivmodsi4_loop>:
 bbe:	aa 1f       	adc	r26, r26
 bc0:	bb 1f       	adc	r27, r27
 bc2:	ee 1f       	adc	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	a2 17       	cp	r26, r18
 bc8:	b3 07       	cpc	r27, r19
 bca:	e4 07       	cpc	r30, r20
 bcc:	f5 07       	cpc	r31, r21
 bce:	20 f0       	brcs	.+8      	; 0xbd8 <__udivmodsi4_ep>
 bd0:	a2 1b       	sub	r26, r18
 bd2:	b3 0b       	sbc	r27, r19
 bd4:	e4 0b       	sbc	r30, r20
 bd6:	f5 0b       	sbc	r31, r21

00000bd8 <__udivmodsi4_ep>:
 bd8:	66 1f       	adc	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	1a 94       	dec	r1
 be2:	69 f7       	brne	.-38     	; 0xbbe <__udivmodsi4_loop>
 be4:	60 95       	com	r22
 be6:	70 95       	com	r23
 be8:	80 95       	com	r24
 bea:	90 95       	com	r25
 bec:	9b 01       	movw	r18, r22
 bee:	ac 01       	movw	r20, r24
 bf0:	bd 01       	movw	r22, r26
 bf2:	cf 01       	movw	r24, r30
 bf4:	08 95       	ret

00000bf6 <setjmp>:
 bf6:	dc 01       	movw	r26, r24
 bf8:	2d 92       	st	X+, r2
 bfa:	3d 92       	st	X+, r3
 bfc:	4d 92       	st	X+, r4
 bfe:	5d 92       	st	X+, r5
 c00:	6d 92       	st	X+, r6
 c02:	7d 92       	st	X+, r7
 c04:	8d 92       	st	X+, r8
 c06:	9d 92       	st	X+, r9
 c08:	ad 92       	st	X+, r10
 c0a:	bd 92       	st	X+, r11
 c0c:	cd 92       	st	X+, r12
 c0e:	dd 92       	st	X+, r13
 c10:	ed 92       	st	X+, r14
 c12:	fd 92       	st	X+, r15
 c14:	0d 93       	st	X+, r16
 c16:	1d 93       	st	X+, r17
 c18:	cd 93       	st	X+, r28
 c1a:	dd 93       	st	X+, r29
 c1c:	ff 91       	pop	r31
 c1e:	ef 91       	pop	r30
 c20:	8d b7       	in	r24, 0x3d	; 61
 c22:	8d 93       	st	X+, r24
 c24:	8e b7       	in	r24, 0x3e	; 62
 c26:	8d 93       	st	X+, r24
 c28:	8f b7       	in	r24, 0x3f	; 63
 c2a:	8d 93       	st	X+, r24
 c2c:	ed 93       	st	X+, r30
 c2e:	fd 93       	st	X+, r31
 c30:	88 27       	eor	r24, r24
 c32:	99 27       	eor	r25, r25
 c34:	09 94       	ijmp

00000c36 <longjmp>:
 c36:	dc 01       	movw	r26, r24
 c38:	cb 01       	movw	r24, r22
 c3a:	81 30       	cpi	r24, 0x01	; 1
 c3c:	91 05       	cpc	r25, r1
 c3e:	81 1d       	adc	r24, r1
 c40:	2d 90       	ld	r2, X+
 c42:	3d 90       	ld	r3, X+
 c44:	4d 90       	ld	r4, X+
 c46:	5d 90       	ld	r5, X+
 c48:	6d 90       	ld	r6, X+
 c4a:	7d 90       	ld	r7, X+
 c4c:	8d 90       	ld	r8, X+
 c4e:	9d 90       	ld	r9, X+
 c50:	ad 90       	ld	r10, X+
 c52:	bd 90       	ld	r11, X+
 c54:	cd 90       	ld	r12, X+
 c56:	dd 90       	ld	r13, X+
 c58:	ed 90       	ld	r14, X+
 c5a:	fd 90       	ld	r15, X+
 c5c:	0d 91       	ld	r16, X+
 c5e:	1d 91       	ld	r17, X+
 c60:	cd 91       	ld	r28, X+
 c62:	dd 91       	ld	r29, X+
 c64:	ed 91       	ld	r30, X+
 c66:	fd 91       	ld	r31, X+
 c68:	0d 90       	ld	r0, X+
 c6a:	f8 94       	cli
 c6c:	fe bf       	out	0x3e, r31	; 62
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	ed bf       	out	0x3d, r30	; 61
 c72:	ed 91       	ld	r30, X+
 c74:	fd 91       	ld	r31, X+
 c76:	09 94       	ijmp

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
